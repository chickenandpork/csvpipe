package org.smallfoot.csv;

/**
 * @file
 */

//import org.apache.http.HttpResponse;
//import org.apache.http.client.HttpClient;
//import org.apache.http.client.methods.HttpPost;
//import org.apache.http.conn.ClientConnectionManager;
//import org.apache.http.conn.scheme.Scheme;
//import org.apache.http.conn.scheme.SchemeRegistry;
//import org.apache.http.conn.ssl.SSLSocketFactory;
//import org.apache.http.entity.StringEntity;
//import org.apache.http.impl.client.DefaultHttpClient;
//import org.w3c.dom.Document;
//import org.w3c.dom.Element;
//import org.w3c.dom.NodeList;

//import javax.net.ssl.KeyManager;
//import javax.net.ssl.SSLContext;
//import javax.net.ssl.TrustManager;
//import javax.net.ssl.X509TrustManager;
//import javax.xml.parsers.DocumentBuilder;
//import javax.xml.parsers.DocumentBuilderFactory;
//import javax.xml.transform.OutputKeys;
//import javax.xml.transform.Transformer;
//import javax.xml.transform.TransformerFactory;
//import javax.xml.transform.dom.DOMSource;
//import javax.xml.transform.stream.StreamResult;
//import javax.xml.XMLConstants;
//import javax.xml.namespace.QName;
//import javax.xml.xpath.XPath;
//import javax.xml.xpath.XPathExpression;
//import javax.xml.xpath.XPathFactory;
//import java.io.StringWriter;
//import java.security.SecureRandom;
//import java.security.cert.CertificateException;
//import java.security.cert.X509Certificate;

//import java.io.FileOutputStream;
//import org.apache.poi.ss.usermodel.WorkbookFactory;
//import org.apache.poi.ss.usermodel.CreationHelper;
//import org.apache.poi.ss.util.CellRangeAddress;
//import org.apache.poi.xssf.usermodel.*;
//import org.apache.poi.ss.usermodel.*;

//import javax.activation.DataSource;
//import javax.activation.URLDataSource;
//import java.io.BufferedReader;
//import java.io.FileInputStream;
//import java.io.FileReader;
//import java.io.InputStreamReader;
//import java.io.OutputStream;
import java.util.Vector;
//import java.util.Calendar;
//import java.util.Vector;
//import gnu.getopt.Getopt;
//import gnu.getopt.LongOpt;



    /**
     * GroupingRowPrinter chains onto a RowPrinter by groupinging columns "print" through it, and "printing" to downstream the combined (strcat) values
     */
    /* HERE */
    public class GroupingRowPrinter extends MergingRowPrinter
    {
        String sep = ":";

        public GroupingRowPrinter ()
        {
            this(new CsvRowPrinter());
        }
        public GroupingRowPrinter (RowPrinter aParent)
        {
            super(aParent);
        }

        protected void setSeperator(String aSep)
        {
            sep = aSep;
        }
        protected int outputColumnCount()
        {
            int res = 1;
            for (int i = 0; i < merge.size(); i++) if (isMerge(i)) res++;
            return res;
        }

        /** set the columns for grouping.  Convenience function. @param cols column numbers to group (first column is #0) */
        public void groupKeys(String[] cols)
        {
            super.mergeKeys(cols);
        }

        public void printHeaderRow (String[] data)
        {
            merge.setSize(data.length);

            super.printHeaderRow(data);

            switch (firstMerge)
            {
            case -1: /* unset */ /* passthru */
            case -2: /* no merge; passthru */
                parent.printHeaderRow(data);
                return ;
            default:
                break;
            }

            parent.printHeaderRow(trim(data));
        }

        protected String[] trim (String[] data)
        {
            work = new Vector<String>(outputColumnCount());
            for (int i = 0; i < merge.size(); i++)
            {
                if (i == firstMerge)
                    work.add(data[i]);
                else if (false == isMerge(i))
                {
//System.out.println("Column " + i + " copies " + data[i]);
                    try
                    {
                        work.add(data[i]);
                    }
                    catch (java.lang.ArrayIndexOutOfBoundsException aioobe)
                    {
                        System.out.print   ("data looks like: ");
                        for (String a: data) System.out.print(a + ", ");
                        System.out.println("so data index " + i + " greater than length " + data.length);
                        throw new java.lang.ArrayIndexOutOfBoundsException(aioobe.getMessage() + " described");
                    }
//System.out.println("Column " + i + " is now " + work.get(i));
                }
                else
                {
//System.out.println("Column " + i + " will merge " + data[i] + " to " + work.get(firstMerge));
                    work.set(firstMerge, work.get(firstMerge)+sep+data[i]);
                    //work.add(null);
                }
            }

            return work.toArray(new String[0]);
        }
    }
