package org.smallfoot.csv;

/**
 * @file
 */

//import org.apache.http.HttpResponse;
//import org.apache.http.client.HttpClient;
//import org.apache.http.client.methods.HttpPost;
//import org.apache.http.conn.ClientConnectionManager;
//import org.apache.http.conn.scheme.Scheme;
//import org.apache.http.conn.scheme.SchemeRegistry;
//import org.apache.http.conn.ssl.SSLSocketFactory;
//import org.apache.http.entity.StringEntity;
//import org.apache.http.impl.client.DefaultHttpClient;
//import org.w3c.dom.Document;
//import org.w3c.dom.Element;
//import org.w3c.dom.NodeList;

//import javax.net.ssl.KeyManager;
//import javax.net.ssl.SSLContext;
//import javax.net.ssl.TrustManager;
//import javax.net.ssl.X509TrustManager;
//import javax.xml.parsers.DocumentBuilder;
//import javax.xml.parsers.DocumentBuilderFactory;
//import javax.xml.transform.OutputKeys;
//import javax.xml.transform.Transformer;
//import javax.xml.transform.TransformerFactory;
//import javax.xml.transform.dom.DOMSource;
//import javax.xml.transform.stream.StreamResult;
//import javax.xml.XMLConstants;
//import javax.xml.namespace.QName;
//import javax.xml.xpath.XPath;
//import javax.xml.xpath.XPathExpression;
//import javax.xml.xpath.XPathFactory;
//import java.io.StringWriter;
//import java.security.SecureRandom;
//import java.security.cert.CertificateException;
//import java.security.cert.X509Certificate;

//import java.io.FileOutputStream;
//import org.apache.poi.ss.usermodel.WorkbookFactory;
//import org.apache.poi.ss.usermodel.CreationHelper;
//import org.apache.poi.ss.util.CellRangeAddress;
//import org.apache.poi.xssf.usermodel.*;
//import org.apache.poi.ss.usermodel.*;

//import javax.activation.DataSource;
//import javax.activation.URLDataSource;
//import java.io.BufferedReader;
//import java.io.FileInputStream;
//import java.io.FileReader;
//import java.io.InputStreamReader;
//import java.io.OutputStream;
//import java.util.Vector;
//import java.util.Calendar;
//import java.util.Vector;
//import gnu.getopt.Getopt;
//import gnu.getopt.LongOpt;

    /**
     * LimitedIntervalsRowPrinter is a basic pass-thru but shunts further passes after a certain number have gone through
     */
    public class LimitedIntervalsRowPrinter extends RowPrinter
    {
        protected RowPrinter parent;
        protected int maxIntervals = Integer.MAX_VALUE;

        public LimitedIntervalsRowPrinter (RowPrinter aParent)
        {
            if (null == aParent) parent = new CsvRowPrinter();    // yes, covering the case of calling it with a null value
            else parent = aParent;
        }
        public LimitedIntervalsRowPrinter (RowPrinter aParent, int maxint)
        {
            if (null == aParent) parent = new CsvRowPrinter();
            else parent = aParent;
            maxIntervals = maxint;
        }

        public void printHeaderRow (String[] data)
        {
            parent.printHeaderRow(data);
        }

        public void printDataRow (String[] data)
        {
            if (true == checkProperty("debug.RowPrintIn"))
            {
                for (String s: data) System.out.print(s+", ");
                System.out.println(" from upstream (LIRP)");
            }

            if (true == checkProperty("debug.RowPrintOut"))
            {
                System.out.print("maxIntervals is " + maxIntervals + " therefore " + ((maxIntervals > 0) ? "" : "not ") + "sending ");
                for (String s: data) System.out.print(s+", ");
                System.out.println(" to downstream (LIRP)");
            }
            if (maxIntervals-- >= 0)
            {
                parent.printDataRow(data);
            }
        }

        public void printFooterRow ()
        {
            parent.printFooterRow();
        }
    };

